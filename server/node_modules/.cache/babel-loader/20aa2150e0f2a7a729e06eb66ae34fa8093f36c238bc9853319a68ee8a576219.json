{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\OTS\\\\OTS-ADMIN\\\\OTS-ADMIN\\\\src\\\\components\\\\TestUpdate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// import moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestUpdate = () => {\n  _s();\n  const {\n    testCreationTableId\n  } = useParams();\n  const [courses, setCourses] = useState([]);\n  const [typeOfTests, setTypeOfTests] = useState([]);\n  const [sections, setSections] = useState([]);\n  const [testData, setTestData] = useState({\n    TestName: '',\n    selectedCourse: '',\n    selectedTypeOfTest: '',\n    testStartDate: '',\n    testEndDate: '',\n    testStartTime: '',\n    testEndTime: '',\n    Duration: '',\n    TotalQuestions: '',\n    totalMarks: '',\n    sectionName: '',\n    noOfQuestions: '',\n    QuestionLimit: '',\n    calculator: 'No',\n    status: 'Inactive',\n    selectedsections: []\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\n    if (name.startsWith('sectionName') || name.startsWith('noOfQuestions') || name.startsWith('QuestionLimit')) {\n      const index = parseInt(name.match(/\\d+/)[0], 10) - 1;\n      const sectionProperty = name.replace(/\\d+/g, '');\n      setTestData(prevData => {\n        const updatedSections = [...prevData.selectedsections];\n        updatedSections[index] = {\n          ...updatedSections[index],\n          [sectionProperty]: updatedValue\n        };\n        return {\n          ...prevData,\n          selectedsections: updatedSections\n        };\n      });\n    } else {\n      // If it's not a section input, update other properties normally\n      setTestData(prevData => ({\n        ...prevData,\n        [name]: updatedValue\n      }));\n    }\n  };\n  function formatTime(dateTimeString) {\n    if (dateTimeString === 'Invalid Time') {\n      return '00:00'; // or any other default time you prefer\n    }\n\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\n  }\n  const formatDate = dateString => {\n    if (!dateString) {\n      return \"\";\n    }\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n  useEffect(() => {\n    // Fetch courses from the API\n    fetch('http://localhost:3081/testcourses').then(response => response.json()).then(data => setCourses(data)).catch(error => console.error('Error fetching courses:', error));\n  }, []);\n  useEffect(() => {\n    // Fetch type of tests from the API based on the selected course\n    if (testData.selectedCourse) {\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`).then(response => response.json()).then(data => setTypeOfTests(data)).catch(error => console.error('Error fetching type of tests:', error));\n    }\n  }, [testData.selectedCourse]);\n  useEffect(() => {\n    // Fetch test data to pre-fill the form\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`).then(response => response.json()).then(data => {\n      // Populate the testData state with fetched data\n      setTestData({\n        ...data,\n        selectedCourse: data.courseCreationId,\n        selectedTypeOfTest: data.courseTypeOfTestId,\n        selectedsections: [{\n          sectionName: data.sectionName,\n          noOfQuestions: data.noOfQuestions,\n          QuestionLimit: data.QuestionLimit\n        }]\n      });\n      const sectionsData = [{\n        sectionName: data.sectionName,\n        noOfQuestions: data.noOfQuestions,\n        QuestionLimit: data.QuestionLimit\n      }];\n      setSections(sectionsData);\n    }).catch(error => console.error('Error fetching test data:', error));\n  }, [testCreationTableId]);\n  console.log(\"Sections:\", sections);\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Ensure that selectedsections is an array\n    if (!Array.isArray(testData.selectedsections)) {\n      console.error('Error: selectedsections is not an array');\n      return;\n    }\n    try {\n      // Map the selectedsections array to the required format\n      const sectionData = testData.selectedsections.map(section => ({\n        sectionName: section.sectionName,\n        noOfQuestions: section.noOfQuestions,\n        QuestionLimit: section.QuestionLimit\n      }));\n      const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          TestName: testData.TestName,\n          selectedCourse: testData.selectedCourse,\n          selectedTypeOfTest: testData.selectedTypeOfTest,\n          testStartDate: testData.testStartDate,\n          testEndDate: testData.testEndDate,\n          testStartTime: testData.testStartTime,\n          testEndTime: testData.testEndTime,\n          Duration: testData.Duration,\n          TotalQuestions: testData.TotalQuestions,\n          totalMarks: testData.totalMarks,\n          calculator: testData.calculator,\n          status: testData.status,\n          selectedsections: sectionData // Pass the formatted sectionData\n        })\n      });\n\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Update Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"TestName\",\n          value: testData.TestName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Course:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedCourse\",\n          value: testData.selectedCourse,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course.courseCreationId,\n            children: course.courseName\n          }, course.courseCreationId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Type of Tests:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedTypeOfTest\",\n          value: testData.selectedTypeOfTest,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Type of Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), typeOfTests.map(typeOfTest => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: typeOfTest.TypeOfTestId,\n            children: typeOfTest.TypeOfTestName\n          }, typeOfTest.TypeOfTestId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testStartDate\",\n          value: formatDate(testData.testStartDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testEndDate\",\n          value: formatDate(testData.testEndDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"testStartTime\",\n          value: formatTime(testData.testStartTime),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"testEndDate\",\n          value: formatTime(testData.testEndDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Duration (in minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"duration\",\n          value: testData.Duration,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Questions:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"totalQuestions\",\n          value: testData.TotalQuestions,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Marks:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"totalMarks\",\n          value: testData.totalMarks,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Number of Questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question Limit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sections.map((section, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: `section${index + 1}`,\n                defaultValue: section.sectionName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: `numQuestions${index + 1}`,\n                defaultValue: section.noOfQuestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: `questionLimit${index + 1}`,\n                defaultValue: section.QuestionLimit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Calculator:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"calculator\",\n          value: testData.calculator,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Yes\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"No\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"status\",\n          value: testData.status,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Active\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Inactive\",\n            children: \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(TestUpdate, \"WsSSV8O+p86orDcsucADfD/Te6k=\", false, function () {\n  return [useParams];\n});\n_c = TestUpdate;\nexport default TestUpdate;\nvar _c;\n$RefreshReg$(_c, \"TestUpdate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","TestUpdate","_s","testCreationTableId","courses","setCourses","typeOfTests","setTypeOfTests","sections","setSections","testData","setTestData","TestName","selectedCourse","selectedTypeOfTest","testStartDate","testEndDate","testStartTime","testEndTime","Duration","TotalQuestions","totalMarks","sectionName","noOfQuestions","QuestionLimit","calculator","status","selectedsections","handleChange","e","name","value","type","target","updatedValue","parseFloat","startsWith","index","parseInt","match","sectionProperty","replace","prevData","updatedSections","formatTime","dateTimeString","formattedTime","moment","format","formatDate","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","fetch","then","response","json","data","catch","error","console","courseCreationId","courseTypeOfTestId","sectionsData","log","handleSubmit","preventDefault","Array","isArray","sectionData","map","section","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","course","courseName","typeOfTest","TypeOfTestId","TypeOfTestName","defaultValue","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/OTS/OTS-ADMIN/OTS-ADMIN/src/components/TestUpdate.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// import moment from 'moment';\r\nconst TestUpdate = () => {\r\n  const { testCreationTableId } = useParams();\r\n  const [courses, setCourses] = useState([]);\r\n  const [typeOfTests, setTypeOfTests] = useState([]);\r\n  const [sections, setSections] = useState([]);\r\n  const [testData, setTestData] = useState({\r\n    TestName: '',\r\n    selectedCourse: '',\r\n    selectedTypeOfTest: '',\r\n    testStartDate: '',\r\n    testEndDate: '',\r\n    testStartTime: '',\r\n    testEndTime: '',\r\n    Duration: '',\r\n    TotalQuestions: '',\r\n    totalMarks: '',\r\n     sectionName: '',\r\n    noOfQuestions: '',\r\n    QuestionLimit: '',\r\n    calculator: 'No',\r\n    status: 'Inactive',\r\n    selectedsections: [],\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type } = e.target;\r\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\r\n  \r\n    if (name.startsWith('sectionName') || name.startsWith('noOfQuestions') || name.startsWith('QuestionLimit')) {\r\n    \r\n      const index = parseInt(name.match(/\\d+/)[0], 10) - 1; \r\n      const sectionProperty = name.replace(/\\d+/g, ''); \r\n      \r\n      setTestData((prevData) => {\r\n        const updatedSections = [...prevData.selectedsections];\r\n        updatedSections[index] = {\r\n          ...updatedSections[index],\r\n          [sectionProperty]: updatedValue,\r\n        };\r\n        return {\r\n          ...prevData,\r\n          selectedsections: updatedSections,\r\n        };\r\n      });\r\n    } else {\r\n      // If it's not a section input, update other properties normally\r\n      setTestData((prevData) => ({\r\n        ...prevData,\r\n        [name]: updatedValue,\r\n      }));\r\n    }\r\n  };\r\n  \r\n  function formatTime(dateTimeString) {\r\n    if (dateTimeString === 'Invalid Time') {\r\n      return '00:00'; // or any other default time you prefer\r\n    }\r\n\r\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\r\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\r\n  }\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) {\r\n      return \"\";\r\n    }\r\n    const date = new Date(dateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch courses from the API\r\n    fetch('http://localhost:3081/testcourses')\r\n      .then(response => response.json())\r\n      .then(data => setCourses(data))\r\n      .catch(error => console.error('Error fetching courses:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch type of tests from the API based on the selected course\r\n    if (testData.selectedCourse) {\r\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`)\r\n        .then(response => response.json())\r\n        .then(data => setTypeOfTests(data))\r\n        .catch(error => console.error('Error fetching type of tests:', error));\r\n    }\r\n  }, [testData.selectedCourse]);\r\n\r\n  useEffect(() => {\r\n    // Fetch test data to pre-fill the form\r\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Populate the testData state with fetched data\r\n        setTestData({\r\n          ...data,\r\n          selectedCourse: data.courseCreationId,\r\n          selectedTypeOfTest: data.courseTypeOfTestId,\r\n          selectedsections: [{\r\n            sectionName: data.sectionName,\r\n            noOfQuestions: data.noOfQuestions,\r\n            QuestionLimit: data.QuestionLimit\r\n          }],\r\n        });\r\n        const sectionsData = [{\r\n          sectionName: data.sectionName,\r\n          noOfQuestions: data.noOfQuestions,\r\n          QuestionLimit: data.QuestionLimit\r\n        }];\r\n        setSections(sectionsData);\r\n\r\n      })\r\n      .catch(error => console.error('Error fetching test data:', error));\r\n  }, [testCreationTableId]);\r\n  console.log(\"Sections:\", sections);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Ensure that selectedsections is an array\r\n    if (!Array.isArray(testData.selectedsections)) {\r\n      console.error('Error: selectedsections is not an array');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // Map the selectedsections array to the required format\r\n      const sectionData = testData.selectedsections.map(section => ({\r\n        sectionName: section.sectionName,\r\n        noOfQuestions: section.noOfQuestions,\r\n        QuestionLimit: section.QuestionLimit,\r\n      }));\r\n  \r\n      const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          TestName: testData.TestName,\r\n          selectedCourse: testData.selectedCourse,\r\n          selectedTypeOfTest: testData.selectedTypeOfTest,\r\n          testStartDate: testData.testStartDate,\r\n          testEndDate: testData.testEndDate,\r\n          testStartTime: testData.testStartTime,\r\n          testEndTime: testData.testEndTime,\r\n          Duration: testData.Duration,\r\n          TotalQuestions: testData.TotalQuestions,\r\n          totalMarks: testData.totalMarks,\r\n          calculator: testData.calculator,\r\n          status: testData.status,\r\n          selectedsections: sectionData, // Pass the formatted sectionData\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      console.log(data);\r\n    } catch (error) {\r\n      console.error('Error sending request:', error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Test Update Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Test Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"TestName\"\r\n            value={testData.TestName}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Select Course:\r\n          <select\r\n            name=\"selectedCourse\"\r\n            value={testData.selectedCourse}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select a Course</option>\r\n            {courses.map(course => (\r\n              <option key={course.courseCreationId} value={course.courseCreationId}>\r\n                {course.courseName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Type of Tests:\r\n          <select\r\n            name=\"selectedTypeOfTest\"\r\n            value={testData.selectedTypeOfTest}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select a Type of Test</option>\r\n            {typeOfTests.map(typeOfTest => (\r\n              <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\r\n                {typeOfTest.TypeOfTestName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Test Start Date:\r\n          <input\r\n            type=\"date\"\r\n            name=\"testStartDate\"\r\n            value={formatDate(testData.testStartDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Test End Date:\r\n          <input\r\n            type=\"date\"\r\n            name=\"testEndDate\"\r\n            value={formatDate(testData.testEndDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Start Time:\r\n          <input\r\n            type=\"time\"\r\n            name=\"testStartTime\"\r\n            value={formatTime(testData.testStartTime)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          End Time:\r\n          <input\r\n            type=\"time\"\r\n            name=\"testEndDate\"\r\n            value={formatTime(testData.testEndDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Duration (in minutes):\r\n          <input\r\n            type=\"number\"\r\n            name=\"duration\"\r\n            value={testData.Duration}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Total Questions:\r\n          <input\r\n            type=\"number\"\r\n            name=\"totalQuestions\"\r\n            value={testData.TotalQuestions}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Total Marks:\r\n          <input\r\n            type=\"number\"\r\n            name=\"totalMarks\"\r\n            value={testData.totalMarks}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Section</th>\r\n              <th>Number of Questions</th>\r\n              <th>Question Limit</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sections.map((section, index) => (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td><input type=\"text\" name={`section${index + 1}`} defaultValue={section.sectionName} /></td>\r\n                <td><input type=\"number\" name={`numQuestions${index + 1}`} defaultValue={section.noOfQuestions} /></td>\r\n                <td><input type=\"number\" name={`questionLimit${index + 1}`} defaultValue={section.QuestionLimit} /></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <label>\r\n          Calculator:\r\n          <select\r\n            name=\"calculator\"\r\n            value={testData.calculator}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"Yes\">Yes</option>\r\n            <option value=\"No\">No</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Status:\r\n          <select\r\n            name=\"status\"\r\n            value={testData.status}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"Inactive\">Inactive</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestUpdate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}