{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\OTS\\\\OTS-ADMIN\\\\OTS-ADMIN\\\\src\\\\components\\\\TestUpdate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestUpdate = () => {\n  _s();\n  const {\n    testCreationTableId\n  } = useParams();\n  const [courses, setCourses] = useState([]);\n  const [typeOfTests, setTypeOfTests] = useState([]);\n  const [sections, setSections] = useState([]);\n  const [testData, setTestData] = useState({\n    TestName: '',\n    selectedCourse: '',\n    selectedTypeOfTest: '',\n    testStartDate: '',\n    testEndDate: '',\n    testStartTime: '',\n    testEndTime: '',\n    Duration: '',\n    TotalQuestions: '',\n    sectionName: '',\n    noOfQuestions: '',\n    QuestionLimit: '',\n    totalMarks: '',\n    calculator: 'No',\n    status: 'Inactive'\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTestData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  function formatTime(dateTimeString) {\n    if (dateTimeString === 'Invalid Time') {\n      return '00:00'; // or any other default time you prefer\n    }\n\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\n  }\n  const formatDate = dateString => {\n    if (!dateString) {\n      return \"\";\n    }\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n  useEffect(() => {\n    // Fetch courses from the API\n    fetch('http://localhost:3081/testcourses').then(response => response.json()).then(data => setCourses(data)).catch(error => console.error('Error fetching courses:', error));\n  }, []);\n  useEffect(() => {\n    // Fetch type of tests from the API based on the selected course\n    if (testData.selectedCourse) {\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`).then(response => response.json()).then(data => setTypeOfTests(data)).catch(error => console.error('Error fetching type of tests:', error));\n    }\n  }, [testData.selectedCourse]);\n  useEffect(() => {\n    // Fetch test data to pre-fill the form\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`).then(response => response.json()).then(data => {\n      // Populate the testData state with fetched data\n      setTestData({\n        ...data,\n        selectedCourse: data.courseCreationId,\n        selectedTypeOfTest: data.courseTypeOfTestId\n      });\n      const sectionsData = [{\n        sectionName: data.sectionName,\n        noOfQuestions: data.noOfQuestions,\n        QuestionLimit: data.QuestionLimit\n      }];\n      setSections(sectionsData);\n    }).catch(error => console.error('Error fetching test data:', error));\n  }, [testCreationTableId]);\n  console.log(\"Sections:\", sections);\n\n  // useEffect(() => {\n  //   // Fetch test data to pre-fill the form\n  //   fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       // Populate the testData state with fetched data\n  //       setTestData({\n  //         ...data,\n  //         selectedCourse: data.courseCreationId,\n  //         selectedTypeOfTest: data.courseTypeOfTestId,\n  //       });\n  //       const sectionsData = [{\n  //         sectionName: data.sectionName,\n  //         noOfQuestions: data.noOfQuestions,\n  //         QuestionLimit: data.QuestionLimit\n  //       }];\n  //       setSections(sectionsData);\n  //     })\n  //     .catch(error => console.error('Error fetching test data:', error));\n  // }, [testCreationTableId]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Update test data\n      const testDataToUpdate = {\n        ...testData\n      };\n      const testResponse = await fetch(`http://localhost:3081/update-test/${testCreationTableId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testDataToUpdate)\n      });\n      const testResult = await testResponse.json();\n      console.log('Test Update Result:', testResult);\n\n      // Update section data\n      const sectionsDataToUpdate = sections.map((section, index) => ({\n        sectionName: testData[`section${index + 1}`],\n        noOfQuestions: testData[`numQuestions${index + 1}`],\n        QuestionLimit: testData[`questionLimit${index + 1}`]\n      }));\n      const sectionsResponse = await fetch(`http://localhost:3081/update-sections/${testCreationTableId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sectionsData: sectionsDataToUpdate\n        })\n      });\n      const sectionsResult = await sectionsResponse.json();\n      console.log('Sections Update Result:', sectionsResult);\n      console.log('Update successful');\n      // Add any additional logic for successful update\n    } catch (error) {\n      console.error('Error updating test and sections:', error);\n      // Log the error message from the server\n      error.json().then(errorMessage => console.error(errorMessage));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Update Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"TestName\",\n          value: testData.TestName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Course:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedCourse\",\n          value: testData.selectedCourse,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course.courseCreationId,\n            children: course.courseName\n          }, course.courseCreationId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Type of Tests:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedTypeOfTest\",\n          value: testData.selectedTypeOfTest,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Type of Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), typeOfTests.map(typeOfTest => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: typeOfTest.TypeOfTestId,\n            children: typeOfTest.TypeOfTestName\n          }, typeOfTest.TypeOfTestId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testStartDate\",\n          value: formatDate(testData.testStartDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testEndDate\",\n          value: formatDate(testData.testEndDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"startTime\",\n          value: formatTime(testData.testStartTime),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"endTime\",\n          value: formatTime(testData.testEndDate),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Duration (in minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"duration\",\n          value: testData.Duration,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Questions:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"totalQuestions\",\n          value: testData.TotalQuestions,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Marks:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"totalMarks\",\n          value: testData.totalMarks,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Number of Questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question Limit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sections.map((section, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: `section${index + 1}`,\n                defaultValue: section.sectionName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: `numQuestions${index + 1}`,\n                defaultValue: section.noOfQuestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: `questionLimit${index + 1}`,\n                defaultValue: section.QuestionLimit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Calculator:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"calculator\",\n          value: testData.calculator,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Yes\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"No\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"status\",\n          value: testData.status,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Active\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Inactive\",\n            children: \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(TestUpdate, \"wEmzYNzjaota6/zyQgt+zJuSfdw=\", false, function () {\n  return [useParams];\n});\n_c = TestUpdate;\nexport default TestUpdate;\nvar _c;\n$RefreshReg$(_c, \"TestUpdate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","moment","jsxDEV","_jsxDEV","TestUpdate","_s","testCreationTableId","courses","setCourses","typeOfTests","setTypeOfTests","sections","setSections","testData","setTestData","TestName","selectedCourse","selectedTypeOfTest","testStartDate","testEndDate","testStartTime","testEndTime","Duration","TotalQuestions","sectionName","noOfQuestions","QuestionLimit","totalMarks","calculator","status","handleChange","e","name","value","target","prevData","formatTime","dateTimeString","formattedTime","format","formatDate","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","fetch","then","response","json","data","catch","error","console","courseCreationId","courseTypeOfTestId","sectionsData","log","handleSubmit","preventDefault","testDataToUpdate","testResponse","method","headers","body","JSON","stringify","testResult","sectionsDataToUpdate","map","section","index","sectionsResponse","sectionsResult","errorMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","course","courseName","typeOfTest","TypeOfTestId","TypeOfTestName","defaultValue","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/OTS/OTS-ADMIN/OTS-ADMIN/src/components/TestUpdate.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport moment from 'moment';\r\nconst TestUpdate = () => {\r\n  const { testCreationTableId } = useParams();\r\n  const [courses, setCourses] = useState([]);\r\n  const [typeOfTests, setTypeOfTests] = useState([]);\r\n  const [sections, setSections] = useState([]);\r\n  const [testData, setTestData] = useState({\r\n    TestName: '',\r\n    selectedCourse: '',\r\n    selectedTypeOfTest: '',\r\n    testStartDate: '',\r\n    testEndDate: '',\r\n    testStartTime: '',\r\n    testEndTime: '',\r\n    Duration: '',\r\n    TotalQuestions: '',\r\n    sectionName: '',\r\n    noOfQuestions: '',\r\n    QuestionLimit: '',\r\n    totalMarks: '',\r\n    calculator: 'No',\r\n    status: 'Inactive',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setTestData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n\r\n  function formatTime(dateTimeString) {\r\n    if (dateTimeString === 'Invalid Time') {\r\n      return '00:00'; // or any other default time you prefer\r\n    }\r\n\r\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\r\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\r\n  }\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) {\r\n      return \"\";\r\n    }\r\n    const date = new Date(dateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch courses from the API\r\n    fetch('http://localhost:3081/testcourses')\r\n      .then(response => response.json())\r\n      .then(data => setCourses(data))\r\n      .catch(error => console.error('Error fetching courses:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch type of tests from the API based on the selected course\r\n    if (testData.selectedCourse) {\r\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`)\r\n        .then(response => response.json())\r\n        .then(data => setTypeOfTests(data))\r\n        .catch(error => console.error('Error fetching type of tests:', error));\r\n    }\r\n  }, [testData.selectedCourse]);\r\n\r\n  useEffect(() => {\r\n    // Fetch test data to pre-fill the form\r\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Populate the testData state with fetched data\r\n        setTestData({\r\n          ...data,\r\n          selectedCourse: data.courseCreationId,\r\n          selectedTypeOfTest: data.courseTypeOfTestId,\r\n        });\r\n        const sectionsData = [{\r\n          sectionName: data.sectionName,\r\n          noOfQuestions: data.noOfQuestions,\r\n          QuestionLimit: data.QuestionLimit\r\n        }];\r\n        setSections(sectionsData);\r\n\r\n      })\r\n      .catch(error => console.error('Error fetching test data:', error));\r\n  }, [testCreationTableId]);\r\n  console.log(\"Sections:\", sections);\r\n\r\n  // useEffect(() => {\r\n  //   // Fetch test data to pre-fill the form\r\n  //   fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\r\n  //     .then(response => response.json())\r\n  //     .then(data => {\r\n  //       // Populate the testData state with fetched data\r\n  //       setTestData({\r\n  //         ...data,\r\n  //         selectedCourse: data.courseCreationId,\r\n  //         selectedTypeOfTest: data.courseTypeOfTestId,\r\n  //       });\r\n  //       const sectionsData = [{\r\n  //         sectionName: data.sectionName,\r\n  //         noOfQuestions: data.noOfQuestions,\r\n  //         QuestionLimit: data.QuestionLimit\r\n  //       }];\r\n  //       setSections(sectionsData);\r\n  //     })\r\n  //     .catch(error => console.error('Error fetching test data:', error));\r\n  // }, [testCreationTableId]);\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    try {\r\n      // Update test data\r\n      const testDataToUpdate = {\r\n        ...testData,\r\n      };\r\n  \r\n      const testResponse = await fetch(`http://localhost:3081/update-test/${testCreationTableId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(testDataToUpdate),\r\n      });\r\n      const testResult = await testResponse.json();\r\n      console.log('Test Update Result:', testResult);\r\n  \r\n      // Update section data\r\n      const sectionsDataToUpdate = sections.map((section, index) => ({\r\n        sectionName: testData[`section${index + 1}`],\r\n        noOfQuestions: testData[`numQuestions${index + 1}`],\r\n        QuestionLimit: testData[`questionLimit${index + 1}`],\r\n      }));\r\n  \r\n      const sectionsResponse = await fetch(`http://localhost:3081/update-sections/${testCreationTableId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sectionsData: sectionsDataToUpdate }),\r\n      });\r\n      const sectionsResult = await sectionsResponse.json();\r\n      console.log('Sections Update Result:', sectionsResult);\r\n  \r\n      console.log('Update successful');\r\n      // Add any additional logic for successful update\r\n    } catch (error) {\r\n      console.error('Error updating test and sections:', error);\r\n      // Log the error message from the server\r\n      error.json().then(errorMessage => console.error(errorMessage));\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Test Update Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Test Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"TestName\"\r\n            value={testData.TestName}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Select Course:\r\n          <select\r\n            name=\"selectedCourse\"\r\n            value={testData.selectedCourse}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select a Course</option>\r\n            {courses.map(course => (\r\n              <option key={course.courseCreationId} value={course.courseCreationId}>\r\n                {course.courseName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Type of Tests:\r\n          <select\r\n            name=\"selectedTypeOfTest\"\r\n            value={testData.selectedTypeOfTest}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select a Type of Test</option>\r\n            {typeOfTests.map(typeOfTest => (\r\n              <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\r\n                {typeOfTest.TypeOfTestName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Test Start Date:\r\n          <input\r\n            type=\"date\"\r\n            name=\"testStartDate\"\r\n            value={formatDate(testData.testStartDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Test End Date:\r\n          <input\r\n            type=\"date\"\r\n            name=\"testEndDate\"\r\n            value={formatDate(testData.testEndDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Start Time:\r\n          <input\r\n            type=\"time\"\r\n            name=\"startTime\"\r\n            value={formatTime(testData.testStartTime)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          End Time:\r\n          <input\r\n            type=\"time\"\r\n            name=\"endTime\"\r\n            value={formatTime(testData.testEndDate)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Duration (in minutes):\r\n          <input\r\n            type=\"text\"\r\n            name=\"duration\"\r\n            value={testData.Duration}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Total Questions:\r\n          <input\r\n            type=\"text\"\r\n            name=\"totalQuestions\"\r\n            value={testData.TotalQuestions}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Total Marks:\r\n          <input\r\n            type=\"text\"\r\n            name=\"totalMarks\"\r\n            value={testData.totalMarks}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Section</th>\r\n              <th>Number of Questions</th>\r\n              <th>Question Limit</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sections.map((section, index) => (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td><input type=\"text\" name={`section${index + 1}`} defaultValue={section.sectionName} /></td>\r\n                <td><input type=\"number\" name={`numQuestions${index + 1}`} defaultValue={section.noOfQuestions} /></td>\r\n                <td><input type=\"number\" name={`questionLimit${index + 1}`} defaultValue={section.QuestionLimit} /></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <label>\r\n          Calculator:\r\n          <select\r\n            name=\"calculator\"\r\n            value={testData.calculator}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"Yes\">Yes</option>\r\n            <option value=\"No\">No</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          Status:\r\n          <select\r\n            name=\"status\"\r\n            value={testData.status}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"Inactive\">Inactive</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestUpdate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}