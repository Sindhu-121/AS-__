{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// const Testcreation = ({ testCreationTableId }) => {\n//   const [testName, setTestName] = useState('');\n//   const [courses, setCourses] = useState([]);\n//   const [selectedCourse, setSelectedCourse] = useState('');\n//   const [startDate, setStartDate] = useState('');\n//   const [startTime, setStartTime] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [endTime, setEndTime] = useState('');\n//   const [duration, setDuration] = useState('');\n//   const [totalQuestions, setTotalQuestions] = useState('');\n//   const [totalMarks, setTotalMarks] = useState('');\n//   const [calculator, setCalculator] = useState('no');\n//   const [status, setStatus] = useState('inactive');\n//   const [typeOfTests, setTypeOfTests] = useState([]);\n//   const [selectedtypeOfTest, setSelectedtypeOfTest] = useState('');\n//   const [numberOfSections, setNumberOfSections] = useState(1);\n//   const [questionLimitChecked, setQuestionLimitChecked] = useState(false);\n//   const [sectionsData, setSectionsData] = useState([]);\n//   useEffect(() => {\n//     fetch('http://localhost:3081/testcourses')\n//       .then((response) => response.json())\n//       .then((data) => setCourses(data))\n//       .catch((error) => console.error('Error fetching courses:', error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCourse) {\n//       fetch(`http://localhost:3081/course-typeoftests/${selectedCourse}`)\n//         .then((response) => response.json())\n//         .then((data) => setTypeOfTests(data))\n//         .catch((error) => console.error('Error fetching course_typeoftests:', error));\n//     }\n//   }, [selectedCourse]);\n\n//   useEffect(() => {\n//     // Fetch data when the component mounts\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:3081/fetch-test-data/${testCreationTableId}`);\n//         const data = await response.json();\n\n//         if (data && Array.isArray(data.sectionsData)) {\n//           setSectionsData(data.sectionsData);\n\n//           // Check if testData is available\n//           if (data.testData) {\n//             const {\n//               TestName,\n//               SelectedCourse,\n//               selectedtypeOfTest,\n//               startDate,\n//               startTime,\n//               endDate,\n//               endTime,\n//               duration,\n//               totalQuestions,\n//               totalMarks,\n//               calculator,\n//               status,\n//             } = data.testData;\n\n//             setTestName(TestName);\n//             setSelectedCourse(SelectedCourse);\n//             setSelectedtypeOfTest(selectedtypeOfTest);\n//             setStartDate(startDate);\n//             setStartTime(startTime);\n//             setEndDate(endDate);\n//             setEndTime(endTime);\n//             setDuration(duration);\n//             setTotalQuestions(totalQuestions);\n//             setTotalMarks(totalMarks);\n//             setCalculator(calculator);\n//             setStatus(status);\n//           } else {\n//             console.error('No test data available.');\n//           }\n//         } else {\n//           console.error('Invalid data format received from the server:', data);\n//         }\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n\n//     };\n\n//     fetchData();\n//   }, [testCreationTableId]); // Add other dependencies as needed\n\n//   const handleSectionChange = (e, index, field) => {\n//     // Function to handle changes in section data\n//     const updatedSectionsData = [...sectionsData];\n//     updatedSectionsData[index] = {\n//       ...updatedSectionsData[index],\n//       [field]: e.target.value,\n//     };\n//     setSectionsData(updatedSectionsData);\n//   };\n\n//   const handleSelectChange = (e) => {\n//     setSelectedCourse(e.target.value);\n//   };\n//   const handleSelectTypeOfTest = (e) => {\n//     setSelectedtypeOfTest(e.target.value);\n//   }\n//   const handleInputChange = (e) => {\n//     setTestName(e.target.value);\n//   };\n//   const handleStartDateChange = (e) => {\n//     setStartDate(e.target.value);\n//   };\n\n//   const handleStartTimeChange = (e) => {\n//     setStartTime(e.target.value);\n//   };\n\n//   const handleEndDateChange = (e) => {\n//     setEndDate(e.target.value);\n//   };\n\n//   const handleEndTimeChange = (e) => {\n//     setEndTime(e.target.value);\n//   };\n\n//   const handleDurationChange = (e) => {\n//     setDuration(e.target.value);\n//   };\n\n//   const handleTotalQuestionsChange = (e) => {\n//     setTotalQuestions(e.target.value);\n//   };\n\n//   const handleTotalMarksChange = (e) => {\n//     setTotalMarks(e.target.value);\n//   };\n//   const handleCalculatorChange = (e) => {\n//     setCalculator(e.target.value);\n//   };\n\n//   const handleStatusChange = (e) => {\n//     setStatus(e.target.value);\n//   };\n\n//   const handleQuestionLimitChange = (e) => {\n//     setQuestionLimitChecked(e.target.checked);\n//   };\n\n//   const addSection = () => {\n//     setNumberOfSections((prevSections) => prevSections + 1);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Submitting form with selectedCourse:', selectedCourse);\n//       console.log('Submitting form with selectedtypeOfTest:', selectedtypeOfTest);\n\n//       const response = await fetch('http://localhost:3081/create-test', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           testName,\n//           selectedCourse,\n//           selectedtypeOfTest,\n//           startDate,\n//           startTime,\n//           endDate,\n//           endTime,\n//           duration,\n//           totalQuestions,\n//           totalMarks,\n//           calculator,\n//           status,\n//           sectionsData,\n//         }),\n//       });\n\n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error('Error submitting form:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Test Name:\n//           <input type=\"text\" value={testName} onChange={handleInputChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Select Course:\n//           <select value={selectedCourse} onChange={handleSelectChange}>\n//             <option value=\"\" disabled>Select a course</option>\n//             {courses.map((course) => (\n//               <option key={course.courseCreationId} value={course.courseCreationId}>\n//                 {course.courseName}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <br />\n\n//         <div>\n//           <label>\n//             Type of Tests:\n//             <select value={selectedtypeOfTest} onChange={handleSelectTypeOfTest}>\n//               <option value=\"\" disabled>Select a type of test</option>\n//               {typeOfTests.map((typeOfTest) => (\n//                 <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\n//                   {typeOfTest.TypeOfTestName}\n//                 </option>\n//               ))}\n//             </select>\n//           </label>\n//         </div>\n\n//         <label>\n//           Test  Start Date:\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\n//         </label>\n//         <label>\n//           Start Time:\n//           <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Test End Date:\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\n//         </label>\n//         <label>\n//           End Time:\n//           <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Duration (in minutes):\n//           <input type=\"number\" value={duration} onChange={handleDurationChange} min=\"1\" />\n//         </label>\n//         <br />\n//         <label>\n//           Total Questions:\n//           <input type=\"number\" value={totalQuestions} onChange={handleTotalQuestionsChange} min=\"1\" />\n//         </label>\n//         <br />\n//         <label>\n//           Total Marks:\n//           <input type=\"number\" value={totalMarks} onChange={handleTotalMarksChange} min=\"1\" />\n//         </label>\n//         <br />\n//         <div>\n//           <label>SECTION</label>\n//           <br />\n//           <label>\n//             <input\n//               type=\"checkbox\"\n//               checked={questionLimitChecked}\n//               onChange={handleQuestionLimitChange}\n//             />Question Limit:\n//           </label>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>#</th>\n//                 <th>Section</th>\n//                 {questionLimitChecked && <th>Question Limit</th>}\n//                 <th>No of Question</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {Array.from({ length: numberOfSections }, (_, index) => (\n//                 <tr key={index}>\n//                   <td>{index + 1}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       value={sectionsData[index]?.sectionName || ''}\n//                       onChange={(e) => handleSectionChange(e, index, 'sectionName')}\n//                     />\n//                   </td>\n//                   {questionLimitChecked && (\n//                     <td>\n//                       <input\n//                         type=\"number\"\n//                         value={sectionsData[index]?.QuestionLimit || ''}\n//                         onChange={(e) => handleSectionChange(e, index, 'QuestionLimit')}\n//                       />\n//                     </td>\n//                   )}\n//                   <td>\n//                     <input\n//                       type=\"number\"\n//                       value={sectionsData[index]?.noOfQuestions || ''}\n//                       onChange={(e) => handleSectionChange(e, index, 'noOfQuestions')}\n//                     />\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n\n//           <button type=\"button\" onClick={addSection}>\n//             +\n//           </button>\n//         </div>\n//         <br />\n//         <label>\n//           Calculator:\n//           <select value={calculator} onChange={handleCalculatorChange}>\n//             <option value=\"yes\">Yes</option>\n//             <option value=\"no\">No</option>\n//           </select>\n//         </label>\n//         <br />\n//         <label>\n//           Status:\n//           <select value={status} onChange={handleStatusChange}>\n//             <option value=\"active\">Active</option>\n//             <option value=\"inactive\">Inactive</option>\n//           </select>\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//     </div>\n//   )\n// }\n\n// export default Testcreation","map":{"version":3,"names":[],"sources":["C:/Users/USER/Desktop/OTS/OTS-ADMIN/OTS-ADMIN/src/components/TestUpdate.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const Testcreation = ({ testCreationTableId }) => {\r\n//   const [testName, setTestName] = useState('');\r\n//   const [courses, setCourses] = useState([]);\r\n//   const [selectedCourse, setSelectedCourse] = useState('');\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [startTime, setStartTime] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [endTime, setEndTime] = useState('');\r\n//   const [duration, setDuration] = useState('');\r\n//   const [totalQuestions, setTotalQuestions] = useState('');\r\n//   const [totalMarks, setTotalMarks] = useState('');\r\n//   const [calculator, setCalculator] = useState('no');\r\n//   const [status, setStatus] = useState('inactive');\r\n//   const [typeOfTests, setTypeOfTests] = useState([]);\r\n//   const [selectedtypeOfTest, setSelectedtypeOfTest] = useState('');\r\n//   const [numberOfSections, setNumberOfSections] = useState(1);\r\n//   const [questionLimitChecked, setQuestionLimitChecked] = useState(false);\r\n//   const [sectionsData, setSectionsData] = useState([]);\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/testcourses')\r\n//       .then((response) => response.json())\r\n//       .then((data) => setCourses(data))\r\n//       .catch((error) => console.error('Error fetching courses:', error));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedCourse) {\r\n//       fetch(`http://localhost:3081/course-typeoftests/${selectedCourse}`)\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTypeOfTests(data))\r\n//         .catch((error) => console.error('Error fetching course_typeoftests:', error));\r\n//     }\r\n//   }, [selectedCourse]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch data when the component mounts\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:3081/fetch-test-data/${testCreationTableId}`);\r\n//         const data = await response.json();\r\n    \r\n//         if (data && Array.isArray(data.sectionsData)) {\r\n//           setSectionsData(data.sectionsData);\r\n    \r\n//           // Check if testData is available\r\n//           if (data.testData) {\r\n//             const {\r\n//               TestName,\r\n//               SelectedCourse,\r\n//               selectedtypeOfTest,\r\n//               startDate,\r\n//               startTime,\r\n//               endDate,\r\n//               endTime,\r\n//               duration,\r\n//               totalQuestions,\r\n//               totalMarks,\r\n//               calculator,\r\n//               status,\r\n//             } = data.testData;\r\n    \r\n//             setTestName(TestName);\r\n//             setSelectedCourse(SelectedCourse);\r\n//             setSelectedtypeOfTest(selectedtypeOfTest);\r\n//             setStartDate(startDate);\r\n//             setStartTime(startTime);\r\n//             setEndDate(endDate);\r\n//             setEndTime(endTime);\r\n//             setDuration(duration);\r\n//             setTotalQuestions(totalQuestions);\r\n//             setTotalMarks(totalMarks);\r\n//             setCalculator(calculator);\r\n//             setStatus(status);\r\n//           } else {\r\n//             console.error('No test data available.');\r\n//           }\r\n//         } else {\r\n//           console.error('Invalid data format received from the server:', data);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n    \r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [testCreationTableId]); // Add other dependencies as needed\r\n  \r\n//   const handleSectionChange = (e, index, field) => {\r\n//     // Function to handle changes in section data\r\n//     const updatedSectionsData = [...sectionsData];\r\n//     updatedSectionsData[index] = {\r\n//       ...updatedSectionsData[index],\r\n//       [field]: e.target.value,\r\n//     };\r\n//     setSectionsData(updatedSectionsData);\r\n//   };\r\n\r\n//   const handleSelectChange = (e) => {\r\n//     setSelectedCourse(e.target.value);\r\n//   };\r\n//   const handleSelectTypeOfTest = (e) => {\r\n//     setSelectedtypeOfTest(e.target.value);\r\n//   }\r\n//   const handleInputChange = (e) => {\r\n//     setTestName(e.target.value);\r\n//   };\r\n//   const handleStartDateChange = (e) => {\r\n//     setStartDate(e.target.value);\r\n//   };\r\n\r\n//   const handleStartTimeChange = (e) => {\r\n//     setStartTime(e.target.value);\r\n//   };\r\n\r\n//   const handleEndDateChange = (e) => {\r\n//     setEndDate(e.target.value);\r\n//   };\r\n\r\n//   const handleEndTimeChange = (e) => {\r\n//     setEndTime(e.target.value);\r\n//   };\r\n\r\n\r\n//   const handleDurationChange = (e) => {\r\n//     setDuration(e.target.value);\r\n//   };\r\n\r\n//   const handleTotalQuestionsChange = (e) => {\r\n//     setTotalQuestions(e.target.value);\r\n//   };\r\n\r\n//   const handleTotalMarksChange = (e) => {\r\n//     setTotalMarks(e.target.value);\r\n//   };\r\n//   const handleCalculatorChange = (e) => {\r\n//     setCalculator(e.target.value);\r\n//   };\r\n\r\n//   const handleStatusChange = (e) => {\r\n//     setStatus(e.target.value);\r\n//   };\r\n\r\n//   const handleQuestionLimitChange = (e) => {\r\n//     setQuestionLimitChecked(e.target.checked);\r\n//   };\r\n\r\n//   const addSection = () => {\r\n//     setNumberOfSections((prevSections) => prevSections + 1);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       console.log('Submitting form with selectedCourse:', selectedCourse);\r\n//       console.log('Submitting form with selectedtypeOfTest:', selectedtypeOfTest);\r\n\r\n//       const response = await fetch('http://localhost:3081/create-test', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           testName,\r\n//           selectedCourse,\r\n//           selectedtypeOfTest,\r\n//           startDate,\r\n//           startTime,\r\n//           endDate,\r\n//           endTime,\r\n//           duration,\r\n//           totalQuestions,\r\n//           totalMarks,\r\n//           calculator,\r\n//           status,\r\n//           sectionsData,\r\n//         }),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(data);\r\n//     } catch (error) {\r\n//       console.error('Error submitting form:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Test Name:\r\n//           <input type=\"text\" value={testName} onChange={handleInputChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Select Course:\r\n//           <select value={selectedCourse} onChange={handleSelectChange}>\r\n//             <option value=\"\" disabled>Select a course</option>\r\n//             {courses.map((course) => (\r\n//               <option key={course.courseCreationId} value={course.courseCreationId}>\r\n//                 {course.courseName}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n\r\n//         <div>\r\n//           <label>\r\n//             Type of Tests:\r\n//             <select value={selectedtypeOfTest} onChange={handleSelectTypeOfTest}>\r\n//               <option value=\"\" disabled>Select a type of test</option>\r\n//               {typeOfTests.map((typeOfTest) => (\r\n//                 <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\r\n//                   {typeOfTest.TypeOfTestName}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </label>\r\n//         </div>\r\n\r\n\r\n//         <label>\r\n//           Test  Start Date:\r\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\r\n//         </label>\r\n//         <label>\r\n//           Start Time:\r\n//           <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Test End Date:\r\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\r\n//         </label>\r\n//         <label>\r\n//           End Time:\r\n//           <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Duration (in minutes):\r\n//           <input type=\"number\" value={duration} onChange={handleDurationChange} min=\"1\" />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Total Questions:\r\n//           <input type=\"number\" value={totalQuestions} onChange={handleTotalQuestionsChange} min=\"1\" />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Total Marks:\r\n//           <input type=\"number\" value={totalMarks} onChange={handleTotalMarksChange} min=\"1\" />\r\n//         </label>\r\n//         <br />\r\n//         <div>\r\n//           <label>SECTION</label>\r\n//           <br />\r\n//           <label>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={questionLimitChecked}\r\n//               onChange={handleQuestionLimitChange}\r\n//             />Question Limit:\r\n//           </label>\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>#</th>\r\n//                 <th>Section</th>\r\n//                 {questionLimitChecked && <th>Question Limit</th>}\r\n//                 <th>No of Question</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {Array.from({ length: numberOfSections }, (_, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{index + 1}</td>\r\n//                   <td>\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={sectionsData[index]?.sectionName || ''}\r\n//                       onChange={(e) => handleSectionChange(e, index, 'sectionName')}\r\n//                     />\r\n//                   </td>\r\n//                   {questionLimitChecked && (\r\n//                     <td>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         value={sectionsData[index]?.QuestionLimit || ''}\r\n//                         onChange={(e) => handleSectionChange(e, index, 'QuestionLimit')}\r\n//                       />\r\n//                     </td>\r\n//                   )}\r\n//                   <td>\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       value={sectionsData[index]?.noOfQuestions || ''}\r\n//                       onChange={(e) => handleSectionChange(e, index, 'noOfQuestions')}\r\n//                     />\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n\r\n//           <button type=\"button\" onClick={addSection}>\r\n//             +\r\n//           </button>\r\n//         </div>\r\n//         <br />\r\n//         <label>\r\n//           Calculator:\r\n//           <select value={calculator} onChange={handleCalculatorChange}>\r\n//             <option value=\"yes\">Yes</option>\r\n//             <option value=\"no\">No</option>\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Status:\r\n//           <select value={status} onChange={handleStatusChange}>\r\n//             <option value=\"active\">Active</option>\r\n//             <option value=\"inactive\">Inactive</option>\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default Testcreation\r\n\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}