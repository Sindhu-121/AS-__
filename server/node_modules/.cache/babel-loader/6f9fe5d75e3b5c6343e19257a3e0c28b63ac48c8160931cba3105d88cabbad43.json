{"ast":null,"code":"app.get('/tests', async (req, res) => {\n  try {\n    const [rows] = await db.query('SELECT testCreationTableId, TestName FROM test_creation_table');\n    res.json(rows);\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\napp.get('/subjects/:testCreationTableId', async (req, res) => {\n  const {\n    testCreationTableId\n  } = req.params;\n  try {\n    const [subjects] = await db.query(`\n      SELECT s.subjectName\n      FROM test_creation_table tt\n      INNER JOIN course_subjects AS cs ON tt.courseCreationId = cs.courseCreationId\n      INNER JOIN subjects AS s ON cs.subjectId = s.subjectId\n      WHERE tt.testCreationTableId = ?\n    `, [testCreationTableId]);\n    res.json(subjects);\n  } catch (error) {\n    console.error('Error fetching subjects:', error);\n    res.status(500).send('Error fetching subjects.');\n  }\n});\napp.get('/sections/:subjectId', async (req, res) => {\n  const {\n    subjectId\n  } = req.params;\n  try {\n    const [rows] = await db.query('SELECT s.sectionName FROM test_creation_table tt INNER JOIN sections AS s ON tt.testCreationTableId = s.testCreationTableId WHERE s.subjectId=?', [subjectId]);\n    res.json(rows);\n  } catch (error) {\n    console.error('Error fetching sections data:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.post('/upload', upload.single('document'), async (req, res) => {\n  const docxFilePath = `uploads/${req.file.filename}`;\n  const outputDir = `uploads/${req.file.originalname}_images`;\n  try {\n    await fs.mkdir(outputDir, {\n      recursive: true\n    });\n    const result = await mammoth.convertToHtml({\n      path: docxFilePath\n    });\n    const htmlContent = result.value;\n    const $ = cheerio.load(htmlContent);\n\n    // Get all images in the order they appear in the HTML\n    const images = [];\n    $('img').each(function (i, element) {\n      const base64Data = $(this).attr('src').replace(/^data:image\\/\\w+;base64,/, '');\n      const imageBuffer = Buffer.from(base64Data, 'base64');\n      images.push(imageBuffer);\n    });\n    let Question_id;\n    for (let i = 0; i < images.length; i++) {\n      const j = i % 6; // Calculate the index within the 6-image cycle\n\n      if (j === 0) {\n        // Save the snapshot image as a PNG file\n        const imageName = `snapshot_${Math.floor(i / 6) + 1}.png`;\n        const imagePath = `${outputDir}/${imageName}`;\n        await fs.writeFile(imagePath, images[i]);\n        const questionRecord = {\n          \"questioImgName\": imageName,\n          \"testCreationTableId\": req.body.testCreationTableId,\n          \"subjectId\": req.body.subjectId,\n          \"sectionId\": req.body.sectionId\n        };\n        console.log(j);\n        Question_id = await insertRecord('questions', questionRecord);\n      } else {\n        // Save the snapshot image as a PNG file\n        const imageName = `snapshot_${Math.floor(i / 6) + 1}_${j}.png`;\n        const imagePath = `${outputDir}/${imageName}`;\n        await fs.writeFile(imagePath, images[i]);\n        if (j < 5) {\n          const optionRecord = {\n            \"optionImgName\": imageName,\n            \"question_id\": Question_id\n          };\n          console.log(j);\n          await insertRecord('options', optionRecord);\n        } else {\n          const solutionRecord = {\n            \"solutionImgName\": imageName,\n            \"question_id\": Question_id\n          };\n          console.log(j);\n          await insertRecord('solution', solutionRecord);\n        }\n      }\n    }\n    res.send('Text content and images extracted and saved to the database with the selected topic ID successfully.');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error extracting content and saving it to the database.');\n  }\n});\nasync function insertRecord(table, record) {\n  try {\n    const [result] = await db.query(`INSERT INTO ${table} SET ?`, record);\n    console.log(`${table} id: ${result.insertId}`);\n    return result.insertId;\n  } catch (err) {\n    console.error(`Error inserting data into ${table}: ${err}`);\n    throw err;\n  }\n}","map":{"version":3,"names":["app","get","req","res","rows","db","query","json","error","console","status","send","testCreationTableId","params","subjects","subjectId","post","upload","single","docxFilePath","file","filename","outputDir","originalname","fs","mkdir","recursive","result","mammoth","convertToHtml","path","htmlContent","value","$","cheerio","load","images","each","i","element","base64Data","attr","replace","imageBuffer","Buffer","from","push","Question_id","length","j","imageName","Math","floor","imagePath","writeFile","questionRecord","body","sectionId","log","insertRecord","optionRecord","solutionRecord","table","record","insertId","err"],"sources":["C:/Users/USER/Desktop/OTS/OTS-ADMIN/OTS-ADMIN/src/components/DocumentUpload.jsx"],"sourcesContent":["app.get('/tests', async (req, res) => {\r\n  try {\r\n      const [rows] = await db.query('SELECT testCreationTableId, TestName FROM test_creation_table');\r\n      res.json(rows);\r\n  } catch (error) {\r\n      console.error('Error fetching test data:', error);\r\n      res.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\napp.get('/subjects/:testCreationTableId', async (req, res) => {\r\n  const { testCreationTableId } = req.params;\r\n\r\n  try {\r\n    const [subjects] = await db.query(`\r\n      SELECT s.subjectName\r\n      FROM test_creation_table tt\r\n      INNER JOIN course_subjects AS cs ON tt.courseCreationId = cs.courseCreationId\r\n      INNER JOIN subjects AS s ON cs.subjectId = s.subjectId\r\n      WHERE tt.testCreationTableId = ?\r\n    `, [testCreationTableId]);\r\n\r\n    res.json(subjects);\r\n  } catch (error) {\r\n    console.error('Error fetching subjects:', error);\r\n    res.status(500).send('Error fetching subjects.');\r\n  }\r\n});\r\n\r\napp.get('/sections/:subjectId', async (req, res) => {\r\n  const { subjectId } = req.params;\r\n  try {\r\n    const [rows] = await db.query('SELECT s.sectionName FROM test_creation_table tt INNER JOIN sections AS s ON tt.testCreationTableId = s.testCreationTableId WHERE s.subjectId=?', [subjectId]);\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error('Error fetching sections data:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\napp.post('/upload', upload.single('document'), async (req, res) => {\r\n  const docxFilePath = `uploads/${req.file.filename}`;\r\n  const outputDir = `uploads/${req.file.originalname}_images`;\r\n\r\n  try {\r\n    await fs.mkdir(outputDir, { recursive: true });\r\n    const result = await mammoth.convertToHtml({ path: docxFilePath });\r\n    const htmlContent = result.value;\r\n    const $ = cheerio.load(htmlContent);\r\n    \r\n    // Get all images in the order they appear in the HTML\r\n    const images = [];\r\n    $('img').each(function (i, element) {\r\n      const base64Data = $(this).attr('src').replace(/^data:image\\/\\w+;base64,/, '');\r\n      const imageBuffer = Buffer.from(base64Data, 'base64');\r\n      images.push(imageBuffer);\r\n    });\r\n\r\n    let Question_id;\r\n    for (let i = 0; i < images.length; i++) {\r\n      const j = i % 6; // Calculate the index within the 6-image cycle\r\n\r\n      if (j === 0) {\r\n        // Save the snapshot image as a PNG file\r\n        const imageName = `snapshot_${Math.floor(i / 6) + 1}.png`;\r\n        const imagePath = `${outputDir}/${imageName}`;\r\n        await fs.writeFile(imagePath, images[i]);\r\n\r\n        const questionRecord = {\r\n          \"questioImgName\": imageName,\r\n          \"testCreationTableId\": req.body.testCreationTableId,\r\n          \"subjectId\": req.body.subjectId,\r\n          \"sectionId\": req.body.sectionId\r\n        };\r\n        console.log(j);\r\n        Question_id = await insertRecord('questions', questionRecord);\r\n      } else {\r\n        // Save the snapshot image as a PNG file\r\n        const imageName = `snapshot_${Math.floor(i / 6) + 1}_${j}.png`;\r\n        const imagePath = `${outputDir}/${imageName}`;\r\n        await fs.writeFile(imagePath, images[i]);\r\n\r\n        if (j < 5) {\r\n          const optionRecord = {\r\n            \"optionImgName\": imageName,\r\n            \"question_id\": Question_id\r\n          };\r\n          console.log(j);\r\n          await insertRecord('options', optionRecord);\r\n        } else {\r\n          const solutionRecord = {\r\n            \"solutionImgName\": imageName,\r\n            \"question_id\": Question_id\r\n          };\r\n          console.log(j);\r\n          await insertRecord('solution', solutionRecord);\r\n        }\r\n      }\r\n    }\r\n\r\n    res.send('Text content and images extracted and saved to the database with the selected topic ID successfully.');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Error extracting content and saving it to the database.');\r\n  }\r\n});\r\n\r\nasync function insertRecord(table, record) {\r\n  try {\r\n    const [result] = await db.query(`INSERT INTO ${table} SET ?`, record);\r\n    console.log(`${table} id: ${result.insertId}`);\r\n    return result.insertId;\r\n  } catch (err) {\r\n    console.error(`Error inserting data into ${table}: ${err}`);\r\n    throw err;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}