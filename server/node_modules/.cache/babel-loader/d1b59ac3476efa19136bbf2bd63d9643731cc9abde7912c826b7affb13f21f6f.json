{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./admin.css\";\n// import { Link } from \"react-router-dom\";\n// const Coursecreation = () => {\n//   const [typeOfTest, setTypeOfTest] = useState([]);\n//   const [selectedtypeOfTest, setSelectedtypeOfTest] = useState([]);\n//   const [exams, setExams] = useState([]);\n//   const [selectedexams, setSelectedexams] = useState(\"\");\n//   const [selectedSubjects, setSelectedSubjects] = useState([]);\n//   const [typeofQuestion, setTypeofQuestion] = useState([]);\n//   const [selectedtypeofQuestion, setSelectedtypeofQuestion] = useState([]);\n//   const [startDate, setStartDate] = useState(\"\");\n//   const [endDate, setEndDate] = useState(\"\");\n//   const [subjectsData, setSubjectsData] = useState([]);\n//   const [isFormOpen, setIsFormOpen] = useState(false);\n//   const [courseData, setCourseData] = useState([]);\n\n//   const resetFormFields = () => {\n//     setFormData({\n//       courseName: \"\",\n//       examId: \"\",\n//       typeofQuestion: \"\",\n//       courseStartDate: \"\",\n//       courseEndDate: \"\",\n//       cost: \"\",\n//       discount: \"\",\n//       discountAmount: \"\",\n//       totalPrice: \"\",\n//     });\n//     setSelectedSubjects([]);\n//     setSelectedtypeofQuestion([]);\n//     setSelectedtypeOfTest([]);\n//     setIsFormOpen(false);\n//   };\n\n//   const [formData, setFormData] = useState({\n//     courseName: \"\",\n//     examId: \"\",\n//     typeofQuestion: \"\",\n//     courseStartDate: \"\",\n//     courseEndDate: \"\",\n//     cost: \"\",\n//     discount: \"\",\n//     discountAmount: \"\",\n//     totalPrice: \"\",\n//   });\n\n//   useEffect(() => {\n//     const fetchSelectedExam = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:3081/courese-exams/${selectedexams}`\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log(\"Selected Exam Data:\", data); // Log the fetched data\n\n//         // Update your state or perform additional actions with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching selected exam:\", error);\n//       }\n//     };\n\n//     fetchSelectedExam();\n//   }, [selectedexams]);\n\n//   useEffect(() => {\n//     const fetchCourseData = async () => {\n//       try {\n//         const response = await fetch(\n//           \"http://localhost:3081/course_creation_table\"\n//         );\n//         const result = await response.json();\n//         const coursesWithArrays = result.map((course) => ({\n//           ...course,\n//           typeOfTestName:course.type_of_test ? course.type_of_test.split(\", \"):[],\n//           subjects: course.subjects ? course.subjects.split(\", \") : [],\n//           typeofQuestion: course.question_types ? course.question_types.split(\", \") : [],\n//         }));\n//         setCourseData(coursesWithArrays);\n//       } catch (error) {\n//         console.error(\"Error fetching course data:\", error);\n//       }\n//     };\n\n//     fetchCourseData();\n//   }, []);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:3081/courese-exams\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setExams(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching exams:\", error));\n//   }, []);\n\n//   const handleexams = async (event) => {\n//     const selectedExamId = event.target.value;\n//     console.log(\"Selected Exam ID:\", selectedExamId);\n//     setSelectedexams(selectedExamId);\n//     console.log(\"Selected Exam ID (after setting):\", selectedexams);\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`\n//       );\n//       const data = await response.json();\n//       console.log(\"Subjects Data:\", data); // Log the fetched data\n//       setSubjectsData(data); // Update subjectsData state\n//       setSelectedSubjects([]); // Reset selected subjects\n//     } catch (error) {\n//       console.error(\"Error fetching subjects:\", error);\n//     }\n\n//     setSelectedexams(selectedExamId);\n//   };\n\n//   const handleSubjectChange = (event, subjectId) => {\n//     const { checked } = event.target;\n\n//     const subject = subjectsData.find((subj) => subj.subjectId === subjectId);\n\n//     if (subject) {\n//       setSelectedSubjects((prevSelectedSubjects) => {\n//         const updatedSelectedSubjects = checked\n//           ? [...prevSelectedSubjects, subjectId]\n//           : prevSelectedSubjects.filter((id) => id !== subjectId);\n\n//         console.log('Selected Subjects:', updatedSelectedSubjects);\n//         return updatedSelectedSubjects;\n//       });\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchTypeOfTest = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3081/type_of_tests\");\n//         const result = await response.json();\n//         setTypeOfTest(result);\n//       } catch (error) {\n//         console.error(\"Error fetching Type of questions:\", error);\n//       }\n//     };\n\n//     fetchTypeOfTest();\n//   }, []);\n\n//   const handletypeoftest = (event, typeOfTestId) => {\n//     const { checked } = event.target;\n\n//     setSelectedtypeOfTest((prevSelectedTest) => {\n//       const updatedSelectedTest = checked\n//         ? [...prevSelectedTest, typeOfTestId]\n//         : prevSelectedTest.filter((id) => id !== typeOfTestId);\n\n//       console.log('Selected Type of Test:', updatedSelectedTest);\n//       return updatedSelectedTest;\n//     });\n//   };\n\n//   const handleQuestionChange = (event, questionTypeId) => {\n//     const { checked } = event.target;\n\n//     setSelectedtypeofQuestion((prevSelectedQuestions) => {\n//       const updatedSelectedQuestions = checked\n//         ? [...prevSelectedQuestions, questionTypeId]\n//         : prevSelectedQuestions.filter((id) => id !== questionTypeId);\n\n//       console.log('Selected Type of Questions:', updatedSelectedQuestions);\n//       return updatedSelectedQuestions;\n//     });\n//   };\n\n//   useEffect(() => {\n//     const fetchTypeOfQuestion = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3081/type_of_questions\");\n//         const result = await response.json();\n//         // console.log(\"Type of Questions Data:\", result); // Add this line to log the data\n//         setTypeofQuestion(result);\n//       } catch (error) {\n//         console.error(\"Error fetching Type of questions:\", error);\n//       }\n//     };\n\n//     fetchTypeOfQuestion();\n//   }, []);\n\n//   const handleStartDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setStartDate(formattedDate);\n//   };\n\n//   const handleEndDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setEndDate(formattedDate);\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name === \"cost\" || name === \"discount\") {\n//       const cost = name === \"cost\" ? parseFloat(value) : formData.cost;\n//       const discount =\n//         name === \"discount\" ? parseFloat(value) : formData.discount;\n//       const discountAmount =\n//         !isNaN(cost) && !isNaN(discount) ? (cost * discount) / 100 : \"\";\n//       const totalPrice =\n//         !isNaN(cost) && !isNaN(discountAmount) ? cost - discountAmount : \"\";\n//         setFormData({\n//           ...formData,\n//           typeOfTest: selectedtypeOfTest,\n//           examId: selectedexams,\n//           subjects: selectedSubjects,\n//           typeofQuestion: selectedtypeofQuestion,\n//           courseStartDate: startDate,\n//           courseEndDate: endDate,\n//           cost: cost,\n//           discount: discount,\n//           discountAmount: discountAmount,\n//           totalPrice: totalPrice,\n//         });\n//     } else if (name === \"courseStartDate\" || name === \"courseEndDate\") {\n//       setFormData({ ...formData, [name]: value });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const requiredFields = [\n//       \"courseName\",\n//       \"examId\",\n//       \"courseStartDate\",\n//       \"courseEndDate\",\n//       \"cost\",\n//       \"discount\",\n//       \"totalPrice\",\n//     ];\n\n//     const isEmptyField = requiredFields.some((field) => !formData[field]);\n\n//     if (isEmptyField) {\n//       alert(\"Please fill in all required fields.\");\n//       return;\n//     }\n//     // window.location.reload();\n//     resetFormFields();\n//     const data = {\n//       ...formData,\n//       typeOfTest: selectedtypeOfTest,\n//       examId: selectedexams,\n//       subjects: selectedSubjects,\n//       typeofQuestion: selectedtypeofQuestion, \n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:3081/course-creation\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(data),\n//       });\n\n//       const result = await response.json();\n//       if (result && result.courseCreationId) {\n//         const courseCreationId = result.courseCreationId;\n//         const subjectsResponse = await fetch(\n//           \"http://localhost:3081/course_type_of_question\",\n//           {\n//             method: \"POST\",\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify({\n//               courseCreationId,\n//               subjectIds: selectedSubjects,\n//               typeofQuestion: selectedtypeofQuestion,\n//               typeOfTestIds:selectedtypeOfTest,\n//             }),\n//           }\n//         );\n\n//         const subjectsResult = await subjectsResponse.json();\n//         console.log(\"Subjects Result:\", subjectsResult);\n//         console.log(result);\n//         if (result.success) {\n//           console.log(\"Course created successfully\");\n//         } else {\n//           console.log(\"Failed to create course:\", result.error);\n//         }\n//       } else {\n//         console.log(\"Failed to create course. Unexpected response:\", result);\n//       }\n//     } catch (error) {\n//       console.error(\"Error submitting course data:\", error);\n//       // Handle error or show an error message to the user\n//     }\n//   };\n\n//   function formatDate(dateString) {\n//     const date = new Date(dateString);\n//     const day = date.getDate().toString().padStart(2, \"0\");\n//     const month = (date.getMonth() + 1).toString().padStart(2, \"0\"); // Month is 0-based\n//     const year = date.getFullYear();\n//     return `${day}/${month}/${year}`;\n//   }\n\n//   const handleDelete = async (courseCreationId) => {\n//     // Display a confirmation dialog before deleting\n//     const confirmDelete = window.confirm(\n//       \"Are you sure you want to delete this course?\"\n//     );\n\n//     if (confirmDelete) {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:3081/course_creation_table_Delete/${courseCreationId}`,\n//           {\n//             method: \"DELETE\",\n//           }\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const result = await response.json();\n//         console.log(result.message);\n//         const updatedCourseData = courseData.filter(\n//           (course) => course.courseCreationId !== courseCreationId\n//         );\n//         console.log(\"Before:\", courseData);\n//         console.log(\"After:\", updatedCourseData);\n//         setCourseData(updatedCourseData);\n//       } catch (error) {\n//         console.error(\"Error deleting course:\", error);\n//       }\n//     } else {\n//       // The user canceled the deletion\n//       console.log(\"Deletion canceled.\");\n//     }\n//   };\n\n//   const openForm = () => {\n//     setIsFormOpen(true);\n//     if (isFormOpen) {\n//       resetFormFields();\n//     }\n//   };\n\n//   const closeForm = () => {\n//     setIsFormOpen(false);\n//     if (isFormOpen) {\n//       resetFormFields();\n//     }\n//   };\n//   return (\n//     <div className=\"course_container\">\n//       <div className=\"course_container_heder\">\n//         <h2>courses</h2>\n\n//         {isFormOpen ? (\n//           <>\n//             <form onSubmit={handleSubmit}>\n//               <button id=\"courses_close_btn\" type=\"button\" onClick={closeForm}>\n//                 <i className=\"far fa-circle-xmark\"></i>\n//               </button>\n//               <div className=\"course_frominput_container\">\n//                 <div>\n//                   <label htmlFor=\"courseName\">Course Name:</label>\n//                   <input\n//                     type=\"text\"\n//                     id=\"courseName\"\n//                     name=\"courseName\"\n//                     value={formData.courseName}\n//                     onChange={handleChange}\n//                   />\n//                 </div>\n//                 <div className=\"course_fromtype_container\">\n//                   <label>type of test:</label>\n//                   <div className=\"course_checkbox_continer_content\">\n//                     {typeOfTest.map((typeofTest) => (\n//                       <div\n//                         className=\"course_checkbox_continer course_frominput_container_media\"\n//                         key={typeofTest.typeOfTestId}\n//                       >\n//                         <input\n//                           type=\"checkbox\"\n//                           id={`typeofTest-${typeofTest.typeOfTestId }`}\n//                           name={`typeofTest-${typeofTest.typeOfTestId }`}\n//                           value={typeofTest.typeOfTestId }\n//                           checked={selectedtypeOfTest.includes(\n//                             typeofTest.typeOfTestId \n//                           )}\n//                           onChange={(e) =>\n//                             handletypeoftest(e, typeofTest.typeOfTestId)\n//                           }\n//                         />\n//                         <label htmlFor={`question-${typeofTest.typeOfTestId}`}>\n//                           {typeofTest.typeOfTestName}\n//                         </label>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               </div> \n\n//               <fieldset>\n//                 <legend>Select Exam</legend>\n//                 <div className=\"course_frominput_container\">\n//                   <div>\n//                     <label htmlFor=\"exams\">Select Exam:</label>\n//                     <select\n//                       id=\"exams\"\n//                       value={selectedexams}\n//                       onChange={handleexams}\n//                     >\n//                       <option value=\"\">Select exams</option>\n//                       {exams.map((exams) => (\n//                         <option key={exams.examId} value={exams.examId}>\n//                           {exams.examName}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   </div>\n//                   <div className=\"course_frominput_container\">\n//                     <label>Select Subjects:</label>\n//                     <div>\n//                       {subjectsData.map((subject) => (\n//                         <div\n//                           className=\"course_frominput_container \"\n//                           id=\"course_frominput_container_media\"\n//                           key={subject.subjectId}\n//                         >\n//                           <input\n//                             type=\"checkbox\"\n//                             id={`subject-${subject.subjectId}`}\n//                             name={`subject-${subject.subjectId}`}\n//                             value={subject.subjectId}\n//                             checked={selectedSubjects.includes(\n//                               subject.subjectId\n//                             )}\n//                             onChange={(e) =>\n//                               handleSubjectChange(e, subject.subjectId)\n//                             }\n//                           />\n//                           <label htmlFor={`subject-${subject.subjectId}`}>\n//                             {subject.subjectName}\n//                           </label>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               </fieldset>\n//               <br />\n//               <fieldset>\n//                 <div className=\"course_frominput_container\">\n//                   <label>type of Questions:</label>\n//                   <div className=\"course_checkbox_continer_content\">\n//                     {typeofQuestion.map((type) => (\n//                       <div\n//                         className=\"course_checkbox_continer course_frominput_container_media\"\n//                         key={type.quesionTypeId}\n//                       >\n//                         <input\n//                           type=\"checkbox\"\n//                           id={`question-${type.quesionTypeId}`}\n//                           name={`question-${type.quesionTypeId}`}\n//                           value={type.quesionTypeId}\n//                           checked={selectedtypeofQuestion.includes(\n//                             type.quesionTypeId\n//                           )}\n//                           onChange={(e) =>\n//                             handleQuestionChange(e, type.quesionTypeId)\n//                           }\n//                         />\n//                         <label htmlFor={`question-${type.quesionTypeId}`}>\n//                           {type.typeofQuestion}\n//                         </label>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               </fieldset>\n//               <br />\n//               <fieldset>\n//                 <legend>Course Duration</legend>\n//                 <div className=\"course_frominput_container\">\n//                   <label htmlFor=\"courseStartDate\">Course Start Date:</label>\n//                   <input\n//                     type=\"date\"\n//                     id=\"courseStartDate\"\n//                     name=\"courseStartDate\"\n//                     value={startDate}\n//                     onChange={handleStartDateChange}\n//                     min={new Date().toISOString().split(\"T\")[0]}\n//                   />\n//                   <div className=\"course_frominput_container\">\n//                     <label htmlFor=\"courseEndDate\">Course End Date:</label>\n//                     <input\n//                       type=\"date\"\n//                       id=\"courseEndDate\"\n//                       name=\"courseEndDate\"\n//                       value={endDate}\n//                       onChange={handleEndDateChange}\n//                       min={new Date().toISOString().split(\"T\")[0]}\n//                     />\n//                   </div>\n//                 </div>\n//               </fieldset>\n//               <br />\n//               <fieldset>\n//                 <legend>Cost and Discounts</legend>\n\n//                 <div className=\"course_frominput_container_parent\">\n//                   <div className=\"course_frominput_containe_discunt \">\n//                     <label htmlFor=\"cost\">Cost:</label>\n//                     <input\n//                       type=\"number\"\n//                       id=\"cost\"\n//                       name=\"cost\"\n//                       value={formData.cost}\n//                       onChange={handleChange}\n//                     />\n//                   </div>\n\n//                   <div className=\"course_frominput_containe_discunt\">\n//                     <label htmlFor=\"discount\">Discount (%):</label>\n//                     <input\n//                       type=\"number\"\n//                       id=\"discount\"\n//                       name=\"discount\"\n//                       value={formData.discount}\n//                       onChange={handleChange}\n//                     />\n//                   </div>\n//                   <div className=\"course_frominput_containe_discunt\">\n//                     <label htmlFor=\"discountAmount\">Discount Amount:</label>\n//                     <input\n//                       type=\"number\"\n//                       id=\"discountAmount\"\n//                       name=\"discountAmount\"\n//                       value={formData.discountAmount}\n//                       readOnly\n//                     />\n//                   </div>\n//                   <div className=\"course_frominput_containe_discunt\">\n//                     <label htmlFor=\"totalPrice\">Total Price:</label>\n//                     <input\n//                       type=\"number\"\n//                       id=\"totalPrice\"\n//                       name=\"totalPrice\"\n//                       value={formData.totalPrice}\n//                       readOnly\n//                     />\n//                   </div>\n//                 </div>\n//               </fieldset>\n//               <button type=\"submit\">Create Course</button>\n//             </form>\n//           </>\n//         ) : (\n//           <div className=\"Add_Course_btn_container\">\n//             <button type=\"button\" onClick={openForm}>\n//               Add course\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//       <div className=\"course_exam_page\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th scope=\"col\">Serial no</th>\n//               <th scope=\"col\">Course Name</th>\n//               <th scope=\"col\">Type of Test</th>\n//               <th scope=\"col\"> Exam</th>\n//               <th scope=\"col\">Subjects</th>\n//               <th scope=\"col\">Type of Questions</th>\n//               <th scope=\"col\">Course Start Date</th>\n//               <th scope=\"col\">Course End Date</th>\n//               <th scope=\"col\">Cost</th>\n//               <th scope=\"col\">Discount</th>\n//               <th scope=\"col\">Total Price</th>\n//               <th scope=\"col\">Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {courseData.map((course, index) => (\n//               <tr key={course.courseCreationId}>\n//                 <td>{index + 1}</td>\n//                 <td>{course.courseName}</td>\n//                  <td>\n//                   {Array.isArray(course.typeOfTestName) &&\n//                   course.typeOfTestName.length > 0\n//                     ? course.typeOfTestName.join(\", \")\n//                     : \"N/A\"}\n//                 </td>\n\n//                 <td>{course.examName}</td>\n//                 <td>\n//                   {Array.isArray(course.subjects) && course.subjects.length > 0\n//                     ? course.subjects.join(\", \")\n//                     : \"N/A\"}\n//                 </td>\n//                 <td>\n//                   {Array.isArray(course.typeofQuestion) &&\n//                   course.typeofQuestion.length > 0\n//                     ? course.typeofQuestion.join(\", \")\n//                     : \"N/A\"}\n//                 </td>\n//                 <td>{formatDate(course.courseStartDate)}</td>\n//                 <td>{formatDate(course.courseEndDate)}</td>\n//                 <td>{course.cost}</td>\n//                 <td>{course.Discount}</td>\n//                 <td>{course.totalPrice}</td>\n//                 <td>\n\n//                   <div className=\"courseupdate_btn_container\">\n//                     <Link to={`/courseupdate/${course.courseCreationId}`}>\n//                       {\" \"}\n//                       <button className=\"courseupdate_btn\">\n//                         <i className=\"fa-solid fa-pencil\"></i>\n//                       </button>\n//                     </Link>\n//                     <button\n//                       className=\"coursedelte_btn\"\n//                       onClick={() => handleDelete(course.courseCreationId)}\n//                     >\n//                       <i className=\"fa-regular fa-trash-can\"></i>\n//                     </button>\n//                   </div>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Coursecreation;","map":{"version":3,"names":[],"sources":["C:/Users/USER/Desktop/OTS/OTS-ADMIN/OTS-ADMIN/src/components/Coursecreation.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./admin.css\";\r\n// import { Link } from \"react-router-dom\";\r\n// const Coursecreation = () => {\r\n//   const [typeOfTest, setTypeOfTest] = useState([]);\r\n//   const [selectedtypeOfTest, setSelectedtypeOfTest] = useState([]);\r\n//   const [exams, setExams] = useState([]);\r\n//   const [selectedexams, setSelectedexams] = useState(\"\");\r\n//   const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n//   const [typeofQuestion, setTypeofQuestion] = useState([]);\r\n//   const [selectedtypeofQuestion, setSelectedtypeofQuestion] = useState([]);\r\n//   const [startDate, setStartDate] = useState(\"\");\r\n//   const [endDate, setEndDate] = useState(\"\");\r\n//   const [subjectsData, setSubjectsData] = useState([]);\r\n//   const [isFormOpen, setIsFormOpen] = useState(false);\r\n//   const [courseData, setCourseData] = useState([]);\r\n\r\n//   const resetFormFields = () => {\r\n//     setFormData({\r\n//       courseName: \"\",\r\n//       examId: \"\",\r\n//       typeofQuestion: \"\",\r\n//       courseStartDate: \"\",\r\n//       courseEndDate: \"\",\r\n//       cost: \"\",\r\n//       discount: \"\",\r\n//       discountAmount: \"\",\r\n//       totalPrice: \"\",\r\n//     });\r\n//     setSelectedSubjects([]);\r\n//     setSelectedtypeofQuestion([]);\r\n//     setSelectedtypeOfTest([]);\r\n//     setIsFormOpen(false);\r\n//   };\r\n\r\n//   const [formData, setFormData] = useState({\r\n//     courseName: \"\",\r\n//     examId: \"\",\r\n//     typeofQuestion: \"\",\r\n//     courseStartDate: \"\",\r\n//     courseEndDate: \"\",\r\n//     cost: \"\",\r\n//     discount: \"\",\r\n//     discountAmount: \"\",\r\n//     totalPrice: \"\",\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const fetchSelectedExam = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:3081/courese-exams/${selectedexams}`\r\n//         );\r\n  \r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n  \r\n//         const data = await response.json();\r\n//         console.log(\"Selected Exam Data:\", data); // Log the fetched data\r\n  \r\n//         // Update your state or perform additional actions with the fetched data\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching selected exam:\", error);\r\n//       }\r\n//     };\r\n  \r\n//     fetchSelectedExam();\r\n//   }, [selectedexams]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchCourseData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           \"http://localhost:3081/course_creation_table\"\r\n//         );\r\n//         const result = await response.json();\r\n//         const coursesWithArrays = result.map((course) => ({\r\n//           ...course,\r\n//           typeOfTestName:course.type_of_test ? course.type_of_test.split(\", \"):[],\r\n//           subjects: course.subjects ? course.subjects.split(\", \") : [],\r\n//           typeofQuestion: course.question_types ? course.question_types.split(\", \") : [],\r\n//         }));\r\n//         setCourseData(coursesWithArrays);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching course data:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchCourseData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"http://localhost:3081/courese-exams\")\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setExams(data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching exams:\", error));\r\n//   }, []);\r\n\r\n//   const handleexams = async (event) => {\r\n//     const selectedExamId = event.target.value;\r\n//     console.log(\"Selected Exam ID:\", selectedExamId);\r\n//     setSelectedexams(selectedExamId);\r\n//     console.log(\"Selected Exam ID (after setting):\", selectedexams);\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`\r\n//       );\r\n//       const data = await response.json();\r\n//       console.log(\"Subjects Data:\", data); // Log the fetched data\r\n//       setSubjectsData(data); // Update subjectsData state\r\n//       setSelectedSubjects([]); // Reset selected subjects\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching subjects:\", error);\r\n//     }\r\n\r\n//     setSelectedexams(selectedExamId);\r\n//   };\r\n\r\n//   const handleSubjectChange = (event, subjectId) => {\r\n//     const { checked } = event.target;\r\n  \r\n//     const subject = subjectsData.find((subj) => subj.subjectId === subjectId);\r\n  \r\n//     if (subject) {\r\n//       setSelectedSubjects((prevSelectedSubjects) => {\r\n//         const updatedSelectedSubjects = checked\r\n//           ? [...prevSelectedSubjects, subjectId]\r\n//           : prevSelectedSubjects.filter((id) => id !== subjectId);\r\n  \r\n//         console.log('Selected Subjects:', updatedSelectedSubjects);\r\n//         return updatedSelectedSubjects;\r\n//       });\r\n//     }\r\n//   };\r\n  \r\n//   useEffect(() => {\r\n//     const fetchTypeOfTest = async () => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:3081/type_of_tests\");\r\n//         const result = await response.json();\r\n//         setTypeOfTest(result);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching Type of questions:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchTypeOfTest();\r\n//   }, []);\r\n\r\n//   const handletypeoftest = (event, typeOfTestId) => {\r\n//     const { checked } = event.target;\r\n  \r\n//     setSelectedtypeOfTest((prevSelectedTest) => {\r\n//       const updatedSelectedTest = checked\r\n//         ? [...prevSelectedTest, typeOfTestId]\r\n//         : prevSelectedTest.filter((id) => id !== typeOfTestId);\r\n  \r\n//       console.log('Selected Type of Test:', updatedSelectedTest);\r\n//       return updatedSelectedTest;\r\n//     });\r\n//   };\r\n\r\n//   const handleQuestionChange = (event, questionTypeId) => {\r\n//     const { checked } = event.target;\r\n  \r\n//     setSelectedtypeofQuestion((prevSelectedQuestions) => {\r\n//       const updatedSelectedQuestions = checked\r\n//         ? [...prevSelectedQuestions, questionTypeId]\r\n//         : prevSelectedQuestions.filter((id) => id !== questionTypeId);\r\n  \r\n//       console.log('Selected Type of Questions:', updatedSelectedQuestions);\r\n//       return updatedSelectedQuestions;\r\n//     });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const fetchTypeOfQuestion = async () => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:3081/type_of_questions\");\r\n//         const result = await response.json();\r\n//         // console.log(\"Type of Questions Data:\", result); // Add this line to log the data\r\n//         setTypeofQuestion(result);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching Type of questions:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchTypeOfQuestion();\r\n//   }, []);\r\n\r\n//   const handleStartDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setStartDate(formattedDate);\r\n//   };\r\n\r\n//   const handleEndDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setEndDate(formattedDate);\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     if (name === \"cost\" || name === \"discount\") {\r\n//       const cost = name === \"cost\" ? parseFloat(value) : formData.cost;\r\n//       const discount =\r\n//         name === \"discount\" ? parseFloat(value) : formData.discount;\r\n//       const discountAmount =\r\n//         !isNaN(cost) && !isNaN(discount) ? (cost * discount) / 100 : \"\";\r\n//       const totalPrice =\r\n//         !isNaN(cost) && !isNaN(discountAmount) ? cost - discountAmount : \"\";\r\n//         setFormData({\r\n//           ...formData,\r\n//           typeOfTest: selectedtypeOfTest,\r\n//           examId: selectedexams,\r\n//           subjects: selectedSubjects,\r\n//           typeofQuestion: selectedtypeofQuestion,\r\n//           courseStartDate: startDate,\r\n//           courseEndDate: endDate,\r\n//           cost: cost,\r\n//           discount: discount,\r\n//           discountAmount: discountAmount,\r\n//           totalPrice: totalPrice,\r\n//         });\r\n//     } else if (name === \"courseStartDate\" || name === \"courseEndDate\") {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     } else {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const requiredFields = [\r\n//       \"courseName\",\r\n//       \"examId\",\r\n//       \"courseStartDate\",\r\n//       \"courseEndDate\",\r\n//       \"cost\",\r\n//       \"discount\",\r\n//       \"totalPrice\",\r\n//     ];\r\n\r\n//     const isEmptyField = requiredFields.some((field) => !formData[field]);\r\n\r\n//     if (isEmptyField) {\r\n//       alert(\"Please fill in all required fields.\");\r\n//       return;\r\n//     }\r\n//     // window.location.reload();\r\n//     resetFormFields();\r\n//     const data = {\r\n//       ...formData,\r\n//       typeOfTest: selectedtypeOfTest,\r\n//       examId: selectedexams,\r\n//       subjects: selectedSubjects,\r\n//       typeofQuestion: selectedtypeofQuestion, \r\n//     };\r\n    \r\n//     try {\r\n//       const response = await fetch(\"http://localhost:3081/course-creation\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(data),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n//       if (result && result.courseCreationId) {\r\n//         const courseCreationId = result.courseCreationId;\r\n//         const subjectsResponse = await fetch(\r\n//           \"http://localhost:3081/course_type_of_question\",\r\n//           {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//               \"Content-Type\": \"application/json\",\r\n//             },\r\n//             body: JSON.stringify({\r\n//               courseCreationId,\r\n//               subjectIds: selectedSubjects,\r\n//               typeofQuestion: selectedtypeofQuestion,\r\n//               typeOfTestIds:selectedtypeOfTest,\r\n//             }),\r\n//           }\r\n//         );\r\n\r\n//         const subjectsResult = await subjectsResponse.json();\r\n//         console.log(\"Subjects Result:\", subjectsResult);\r\n//         console.log(result);\r\n//         if (result.success) {\r\n//           console.log(\"Course created successfully\");\r\n//         } else {\r\n//           console.log(\"Failed to create course:\", result.error);\r\n//         }\r\n//       } else {\r\n//         console.log(\"Failed to create course. Unexpected response:\", result);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting course data:\", error);\r\n//       // Handle error or show an error message to the user\r\n//     }\r\n//   };\r\n\r\n//   function formatDate(dateString) {\r\n//     const date = new Date(dateString);\r\n//     const day = date.getDate().toString().padStart(2, \"0\");\r\n//     const month = (date.getMonth() + 1).toString().padStart(2, \"0\"); // Month is 0-based\r\n//     const year = date.getFullYear();\r\n//     return `${day}/${month}/${year}`;\r\n//   }\r\n\r\n//   const handleDelete = async (courseCreationId) => {\r\n//     // Display a confirmation dialog before deleting\r\n//     const confirmDelete = window.confirm(\r\n//       \"Are you sure you want to delete this course?\"\r\n//     );\r\n\r\n//     if (confirmDelete) {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:3081/course_creation_table_Delete/${courseCreationId}`,\r\n//           {\r\n//             method: \"DELETE\",\r\n//           }\r\n//         );\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         const result = await response.json();\r\n//         console.log(result.message);\r\n//         const updatedCourseData = courseData.filter(\r\n//           (course) => course.courseCreationId !== courseCreationId\r\n//         );\r\n//         console.log(\"Before:\", courseData);\r\n//         console.log(\"After:\", updatedCourseData);\r\n//         setCourseData(updatedCourseData);\r\n//       } catch (error) {\r\n//         console.error(\"Error deleting course:\", error);\r\n//       }\r\n//     } else {\r\n//       // The user canceled the deletion\r\n//       console.log(\"Deletion canceled.\");\r\n//     }\r\n//   };\r\n\r\n//   const openForm = () => {\r\n//     setIsFormOpen(true);\r\n//     if (isFormOpen) {\r\n//       resetFormFields();\r\n//     }\r\n//   };\r\n\r\n//   const closeForm = () => {\r\n//     setIsFormOpen(false);\r\n//     if (isFormOpen) {\r\n//       resetFormFields();\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className=\"course_container\">\r\n//       <div className=\"course_container_heder\">\r\n//         <h2>courses</h2>\r\n\r\n//         {isFormOpen ? (\r\n//           <>\r\n//             <form onSubmit={handleSubmit}>\r\n//               <button id=\"courses_close_btn\" type=\"button\" onClick={closeForm}>\r\n//                 <i className=\"far fa-circle-xmark\"></i>\r\n//               </button>\r\n//               <div className=\"course_frominput_container\">\r\n//                 <div>\r\n//                   <label htmlFor=\"courseName\">Course Name:</label>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     id=\"courseName\"\r\n//                     name=\"courseName\"\r\n//                     value={formData.courseName}\r\n//                     onChange={handleChange}\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"course_fromtype_container\">\r\n//                   <label>type of test:</label>\r\n//                   <div className=\"course_checkbox_continer_content\">\r\n//                     {typeOfTest.map((typeofTest) => (\r\n//                       <div\r\n//                         className=\"course_checkbox_continer course_frominput_container_media\"\r\n//                         key={typeofTest.typeOfTestId}\r\n//                       >\r\n//                         <input\r\n//                           type=\"checkbox\"\r\n//                           id={`typeofTest-${typeofTest.typeOfTestId }`}\r\n//                           name={`typeofTest-${typeofTest.typeOfTestId }`}\r\n//                           value={typeofTest.typeOfTestId }\r\n//                           checked={selectedtypeOfTest.includes(\r\n//                             typeofTest.typeOfTestId \r\n//                           )}\r\n//                           onChange={(e) =>\r\n//                             handletypeoftest(e, typeofTest.typeOfTestId)\r\n//                           }\r\n//                         />\r\n//                         <label htmlFor={`question-${typeofTest.typeOfTestId}`}>\r\n//                           {typeofTest.typeOfTestName}\r\n//                         </label>\r\n//                       </div>\r\n//                     ))}\r\n//                   </div>\r\n//                 </div>\r\n//               </div> \r\n\r\n//               <fieldset>\r\n//                 <legend>Select Exam</legend>\r\n//                 <div className=\"course_frominput_container\">\r\n//                   <div>\r\n//                     <label htmlFor=\"exams\">Select Exam:</label>\r\n//                     <select\r\n//                       id=\"exams\"\r\n//                       value={selectedexams}\r\n//                       onChange={handleexams}\r\n//                     >\r\n//                       <option value=\"\">Select exams</option>\r\n//                       {exams.map((exams) => (\r\n//                         <option key={exams.examId} value={exams.examId}>\r\n//                           {exams.examName}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"course_frominput_container\">\r\n//                     <label>Select Subjects:</label>\r\n//                     <div>\r\n//                       {subjectsData.map((subject) => (\r\n//                         <div\r\n//                           className=\"course_frominput_container \"\r\n//                           id=\"course_frominput_container_media\"\r\n//                           key={subject.subjectId}\r\n//                         >\r\n//                           <input\r\n//                             type=\"checkbox\"\r\n//                             id={`subject-${subject.subjectId}`}\r\n//                             name={`subject-${subject.subjectId}`}\r\n//                             value={subject.subjectId}\r\n//                             checked={selectedSubjects.includes(\r\n//                               subject.subjectId\r\n//                             )}\r\n//                             onChange={(e) =>\r\n//                               handleSubjectChange(e, subject.subjectId)\r\n//                             }\r\n//                           />\r\n//                           <label htmlFor={`subject-${subject.subjectId}`}>\r\n//                             {subject.subjectName}\r\n//                           </label>\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               </fieldset>\r\n//               <br />\r\n//               <fieldset>\r\n//                 <div className=\"course_frominput_container\">\r\n//                   <label>type of Questions:</label>\r\n//                   <div className=\"course_checkbox_continer_content\">\r\n//                     {typeofQuestion.map((type) => (\r\n//                       <div\r\n//                         className=\"course_checkbox_continer course_frominput_container_media\"\r\n//                         key={type.quesionTypeId}\r\n//                       >\r\n//                         <input\r\n//                           type=\"checkbox\"\r\n//                           id={`question-${type.quesionTypeId}`}\r\n//                           name={`question-${type.quesionTypeId}`}\r\n//                           value={type.quesionTypeId}\r\n//                           checked={selectedtypeofQuestion.includes(\r\n//                             type.quesionTypeId\r\n//                           )}\r\n//                           onChange={(e) =>\r\n//                             handleQuestionChange(e, type.quesionTypeId)\r\n//                           }\r\n//                         />\r\n//                         <label htmlFor={`question-${type.quesionTypeId}`}>\r\n//                           {type.typeofQuestion}\r\n//                         </label>\r\n//                       </div>\r\n//                     ))}\r\n//                   </div>\r\n//                 </div>\r\n//               </fieldset>\r\n//               <br />\r\n//               <fieldset>\r\n//                 <legend>Course Duration</legend>\r\n//                 <div className=\"course_frominput_container\">\r\n//                   <label htmlFor=\"courseStartDate\">Course Start Date:</label>\r\n//                   <input\r\n//                     type=\"date\"\r\n//                     id=\"courseStartDate\"\r\n//                     name=\"courseStartDate\"\r\n//                     value={startDate}\r\n//                     onChange={handleStartDateChange}\r\n//                     min={new Date().toISOString().split(\"T\")[0]}\r\n//                   />\r\n//                   <div className=\"course_frominput_container\">\r\n//                     <label htmlFor=\"courseEndDate\">Course End Date:</label>\r\n//                     <input\r\n//                       type=\"date\"\r\n//                       id=\"courseEndDate\"\r\n//                       name=\"courseEndDate\"\r\n//                       value={endDate}\r\n//                       onChange={handleEndDateChange}\r\n//                       min={new Date().toISOString().split(\"T\")[0]}\r\n//                     />\r\n//                   </div>\r\n//                 </div>\r\n//               </fieldset>\r\n//               <br />\r\n//               <fieldset>\r\n//                 <legend>Cost and Discounts</legend>\r\n\r\n//                 <div className=\"course_frominput_container_parent\">\r\n//                   <div className=\"course_frominput_containe_discunt \">\r\n//                     <label htmlFor=\"cost\">Cost:</label>\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       id=\"cost\"\r\n//                       name=\"cost\"\r\n//                       value={formData.cost}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                   </div>\r\n\r\n//                   <div className=\"course_frominput_containe_discunt\">\r\n//                     <label htmlFor=\"discount\">Discount (%):</label>\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       id=\"discount\"\r\n//                       name=\"discount\"\r\n//                       value={formData.discount}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"course_frominput_containe_discunt\">\r\n//                     <label htmlFor=\"discountAmount\">Discount Amount:</label>\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       id=\"discountAmount\"\r\n//                       name=\"discountAmount\"\r\n//                       value={formData.discountAmount}\r\n//                       readOnly\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"course_frominput_containe_discunt\">\r\n//                     <label htmlFor=\"totalPrice\">Total Price:</label>\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       id=\"totalPrice\"\r\n//                       name=\"totalPrice\"\r\n//                       value={formData.totalPrice}\r\n//                       readOnly\r\n//                     />\r\n//                   </div>\r\n//                 </div>\r\n//               </fieldset>\r\n//               <button type=\"submit\">Create Course</button>\r\n//             </form>\r\n//           </>\r\n//         ) : (\r\n//           <div className=\"Add_Course_btn_container\">\r\n//             <button type=\"button\" onClick={openForm}>\r\n//               Add course\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//       <div className=\"course_exam_page\">\r\n//         <table>\r\n//           <thead>\r\n//             <tr>\r\n//               <th scope=\"col\">Serial no</th>\r\n//               <th scope=\"col\">Course Name</th>\r\n//               <th scope=\"col\">Type of Test</th>\r\n//               <th scope=\"col\"> Exam</th>\r\n//               <th scope=\"col\">Subjects</th>\r\n//               <th scope=\"col\">Type of Questions</th>\r\n//               <th scope=\"col\">Course Start Date</th>\r\n//               <th scope=\"col\">Course End Date</th>\r\n//               <th scope=\"col\">Cost</th>\r\n//               <th scope=\"col\">Discount</th>\r\n//               <th scope=\"col\">Total Price</th>\r\n//               <th scope=\"col\">Action</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {courseData.map((course, index) => (\r\n//               <tr key={course.courseCreationId}>\r\n//                 <td>{index + 1}</td>\r\n//                 <td>{course.courseName}</td>\r\n//                  <td>\r\n//                   {Array.isArray(course.typeOfTestName) &&\r\n//                   course.typeOfTestName.length > 0\r\n//                     ? course.typeOfTestName.join(\", \")\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n              \r\n\r\n//                 <td>{course.examName}</td>\r\n//                 <td>\r\n//                   {Array.isArray(course.subjects) && course.subjects.length > 0\r\n//                     ? course.subjects.join(\", \")\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//                 <td>\r\n//                   {Array.isArray(course.typeofQuestion) &&\r\n//                   course.typeofQuestion.length > 0\r\n//                     ? course.typeofQuestion.join(\", \")\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//                 <td>{formatDate(course.courseStartDate)}</td>\r\n//                 <td>{formatDate(course.courseEndDate)}</td>\r\n//                 <td>{course.cost}</td>\r\n//                 <td>{course.Discount}</td>\r\n//                 <td>{course.totalPrice}</td>\r\n//                 <td>\r\n\r\n//                   <div className=\"courseupdate_btn_container\">\r\n//                     <Link to={`/courseupdate/${course.courseCreationId}`}>\r\n//                       {\" \"}\r\n//                       <button className=\"courseupdate_btn\">\r\n//                         <i className=\"fa-solid fa-pencil\"></i>\r\n//                       </button>\r\n//                     </Link>\r\n//                     <button\r\n//                       className=\"coursedelte_btn\"\r\n//                       onClick={() => handleDelete(course.courseCreationId)}\r\n//                     >\r\n//                       <i className=\"fa-regular fa-trash-can\"></i>\r\n//                     </button>\r\n//                   </div>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Coursecreation;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}